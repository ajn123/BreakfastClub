ARG PHP_EXTS="pdo_pgsql opcache pcntl zip"
ARG PHP_PECL_EXTS="redis"

FROM composer:latest AS composer

WORKDIR /var/www/

RUN addgroup -S composer \
    && adduser -S composer -G composer \
    && apk add git openssh-client

COPY composer.json composer.lock ./

COPY . .

RUN composer install

FROM node:latest AS node

WORKDIR /var/www/

COPY package.json ./

RUN npm install

COPY . .

RUN npm run build

FROM php:8.3-fpm-alpine

ARG PHP_EXTS
ARG PHP_PECL_EXTS

WORKDIR /var/www/html

RUN apk add --no-cache postgresql-dev libzip-dev autoconf make \
    && docker-php-ext-install ${PHP_EXTS} \
    && pecl install ${PHP_PECL_EXTS} \
    && docker-php-ext-enable ${PHP_PECL_EXTS} 


# Install PostgreSQL client
RUN apk add --no-cache postgresql-client

# Create directory for PostgreSQL data
RUN mkdir -p /run/postgresql && chown www-data:www-data /run/postgresql

# Install required PHP extensions for PostgreSQL
RUN docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql \
    && docker-php-ext-install pdo_pgsql pgsql



RUN apk add --no-cache --virtual build-essentials libgcc libzip

RUN apk add nginx \
    && mkdir -p /var/run/php && chown www-data:www-data /var/run/php


WORKDIR /var/www

COPY --chown=composer . .


RUN chown -R www-data:www-data /var/www/storage

COPY --from=composer /var/www/vendor ./vendor
COPY --from=node /var/www/public/build ./public/build
COPY .docker/nginx/default.conf /etc/nginx/nginx.conf


RUN  chown -R www-data:www-data /var/www/public
#RUN chown -R www-data:www-data /var/www/cd 

EXPOSE 80

CMD [ "sh", "-c", "nginx && php-fpm"]