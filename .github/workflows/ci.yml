name: Laravel CI

permissions:
  packages: write  # Allow writing to packages
  contents: read   # Allow reading repository contents

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: api
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, redis
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Copy .env
        run: |
          cd api
          cp .env.example .env
          
      - name: Install Dependencies
        run: |
          cd api
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
          npm install
          
      - name: Generate key
        run: |
          cd api
          php artisan key:generate
          
      - name: Directory Permissions
        run: |
          cd api
          chmod -R 777 storage bootstrap/cache
          
      - name: Run Tests
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: api
          DB_USERNAME: root
          DB_PASSWORD: password
        run: |
          cd api
          npm run build
          php artisan test

  
  publish-docker-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: '8.2'
      - name: Install Dependencies
        run: |
          curl -sS https://getcomposer.org/installer | php -- --version=2.7.6
          sudo mv composer.phar /usr/local/bin/composer
          cd api
          composer install --no-interaction --prefer-dist
      - name: Install sail
        run: |
          cd api
          cp .env.example .env
          composer require laravel/sail --dev
          php artisan sail:install --with=pgsql,redis,mailpit
      - name: Build sail image
        run: |
          cd api
          docker buildx build --platform linux/amd64 -f docker/php-fpm/Dockerfile -t breakfast-club-php-fpm .
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to GitHub Container Registry
        run: |
          cd api
          docker tag api-nginx:latest ghcr.io/ajn123/breakfastclub/breakfast-club:latest
          docker push ghcr.io/ajn123/breakfastclub/breakfast-club:latest

  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/docker/php-fpm/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/breakfast-club-php-fpm:latest

      - name: Build Nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./api/docker/nginx
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/breakfast-club-nginx:latest
          file: ./api/docker/nginx/Dockerfile
