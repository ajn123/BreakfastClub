name: Deploy to Kubernetes
on:
  push:
    branches: [ main ]

permissions:
  packages: write    
jobs:

  prune-images:
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prune old images
        uses: vlaurin/action-ghcr-prune@v0.5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          container: breakfast-club-php-fpm
          keep-last: 3
          prune-untagged: true

      

      - name: Prune old Nginx images
        uses: vlaurin/action-ghcr-prune@v0.5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          container: breakfast-club-nginx
          dry-run: false
          keep-last: 3
          prune-untagged: true

  build:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/docker/php-fpm/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/breakfast-club-php-fpm:latest

      - name: Generate SSL Keys
        run: |
          cd api/docker/nginx/ssl
          chmod +x generate-keys.sh
          ./generate-keys.sh

      - name: Build Nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./api/docker/nginx
          platforms: linux/amd64
          build-args: |
            PHP_UPSTREAM_CONTAINER=localhost
            PHP_UPSTREAM_PORT=9000
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/breakfast-club-nginx:latest
          file: ./api/docker/nginx/Dockerfile

  # deploy:
  #   needs: build
  #   if: success()
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Install doctl
  #     uses: digitalocean/action-doctl@v2
  #     with:
  #       token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
  #   - name: Save DigitalOcean kubeconfig
  #     run: doctl kubernetes cluster kubeconfig save my-cluster
        
  #   - name: Deploy to cluster
  #     run: |
  #       kubectl rollout restart deployment php-app -n prod
        



  # cleanup:
  #   needs: build
  #   if: success()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Login to GHCR
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Clean up old images
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         REPO_OWNER: ${{ github.repository_owner }}
  #         REPO_NAME: breakfast-club
  #       run: |
  #         # Get all versions except latest
  #         VERSIONS=$(curl -s \
  #           -H "Accept: application/vnd.github.v3+json" \
  #           -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
  #           "https://api.github.com/user/packages/container/${REPO_NAME}/versions" \
  #           | jq -r '.[] | select(.metadata.container.tags[] != "latest") | .id')

  #         # Delete old versions
  #         for VERSION_ID in $VERSIONS
  #         do
  #           echo "Deleting version ID: $VERSION_ID"
  #           curl -s -X DELETE \
  #             -H "Accept: application/vnd.github.v3+json" \
  #             -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
  #             "https://api.github.com/user/packages/container/${REPO_NAME}/versions/${VERSION_ID}"
  #         done
          
  #         echo "Cleanup completed!"


  